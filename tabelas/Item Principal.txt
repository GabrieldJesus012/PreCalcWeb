/* 
        async function calcularItemPrincipal(item, dados) {
            const { inicioGraca, fimGraca } = calcularPeriodoGraca(dados.anoOrcamento);
            
            // Data base específica do item
            const dataBase = criarDataBase(item.mesBase, item.anoBase);
            
            let indicesCNJ = 1;
            let dadosSelic = { indiceselic: 1 };
            let indiceipca = 1;
            let jurosmora = 0;
            
            if (item.indices.cnj) {
                indicesCNJ = obterIndiceCNJ(item.mesBase, item.anoBase);
            } 
            
            if (item.indices.selic) {
                const temSelicInformado = (item.tipoSelic === 'valor' && item.valorSelic > 0) || 
                (item.tipoSelic === 'percentual' && item.percentualSelic > 0);
                
                let dataInicioSelic = dataBase;

                if (temSelicInformado) {
                    dataInicioSelic = new Date(dataBase);
                    if (item.mesReferenciaSelic === 'mesAnterior') {
                        // SELIC informado é do mês anterior, então começar da própria data base
                        dataInicioSelic = new Date(dataBase);
                    } else {
                        // SELIC informado é do mesmo mês da data base, então começar do mês seguinte
                        dataInicioSelic = new Date(dataBase);
                        dataInicioSelic.setMonth(dataInicioSelic.getMonth() + 1);
                    }
                }

                dadosSelic = await calcularSelic(dataInicioSelic, inicioGraca, fimGraca);

                let percentualSelicAdicional = 0;

                if (item.tipoSelic === 'valor' && item.valorSelic > 0) {
                    // Se informou valor em R$, calcular o percentual
                    const totalBase = item.valorPrincipal + item.valorJuros;
                    if (totalBase > 0) {
                        percentualSelicAdicional = item.valorSelic / totalBase;
                    }
                } else if (item.tipoSelic === 'percentual' && item.percentualSelic > 0) {
                    percentualSelicAdicional = item.percentualSelic;
                }
                
                if (percentualSelicAdicional > 0) {
                    const percentualSelicOriginal = dadosSelic.indiceselic - 1;
                    
                    const percentualSelicTotal = percentualSelicOriginal + percentualSelicAdicional;
                    
                    dadosSelic.indiceselic = 1 + percentualSelicTotal;
                }
            } 
            
            if (item.indices.ipca) {
                indiceipca = await calcularIpca(dataBase, inicioGraca, fimGraca);
            } 
            
            if (item.indices.jurosMora) {
                jurosmora = calcularSomaJurosMora(item.mesBase, item.anoBase, dados.natureza, inicioGraca, fimGraca) / 100;
            } 
            
            // Cálculos dos índices compostos
            const indiceprinc = indicesCNJ * dadosSelic.indiceselic * indiceipca;
            const indicejur = dadosSelic.indiceselic * indiceipca;
            
            // Cálculo de juros de mora
            const valorjurosmora = item.valorPrincipal * indicesCNJ * jurosmora;
            const jurosItem = valorjurosmora + (item.valorJuros * indicesCNJ);
            
            // Valores atualizados
            const valorPrincipalAtualizado = item.valorPrincipal * indiceprinc;
            const valorJurosAtualizado = jurosItem * indicejur;
            const valorTotalItem = valorPrincipalAtualizado + valorJurosAtualizado;
            
            const resultado = {
                id: item.id,
                descricao: item.descricao,
                valorOriginal: {
                    principal: item.valorPrincipal,
                    juros: item.valorJuros,
                    total: item.valorPrincipal + item.valorJuros
                },
                valorAtualizado: {
                    principal: valorPrincipalAtualizado,
                    juros: valorJurosAtualizado,
                    total: valorTotalItem
                },
                indices: {
                    cnj: indicesCNJ,
                    selic: dadosSelic.indiceselic,
                    ipca: indiceipca,
                    jurosMora: jurosmora,
                    indicePrincipal: indiceprinc,
                    indiceJuros: indicejur
                },
                tributacao: item.tributacao,
                jurosMoraCalculado: valorjurosmora
            };
            
            return resultado;
        }

        function totalizarTributacao(itensCalculados) {            
            const totais = {
                valorPrincipalTotal: 0,
                valorJurosTotal: 0,
                valorGeralTotal: 0,
                rraTotal: 0,
                
                // Tributação IR
                principalTributadoIR: 0,
                jurosTributadoIR: 0,
                isentoIR: 0,
                
                // Tributação Previdência
                principalTributadoPrevidencia: 0,
                jurosTributadoPrevidencia: 0,
                isentoPrevidencia: 0
            };
            
            for (const item of itensCalculados) {                
                // Totais gerais
                totais.valorPrincipalTotal += item.valorAtualizado.principal;
                totais.valorJurosTotal += item.valorAtualizado.juros;
                totais.valorGeralTotal += item.valorAtualizado.total;
                totais.rraTotal += item.tributacao.rra || 0;
                
                // Tributação IR
                if (item.tributacao.ir) {
                    totais.principalTributadoIR += item.valorAtualizado.principal;
                    totais.jurosTributadoIR += item.valorAtualizado.juros;
                } else {
                    totais.isentoIR += item.valorAtualizado.total;
                }
                
                // Tributação Previdência
                if (item.tributacao.previdencia) {
                    totais.principalTributadoPrevidencia += item.valorAtualizado.principal;
                    totais.jurosTributadoPrevidencia += item.valorAtualizado.juros;
                } else {
                    totais.isentoPrevidencia += item.valorAtualizado.total;
                }
            }
            
            return totais;
        }

        async function calcularPagamentos(dados) {
            if (!dados.pagamentos || dados.pagamentos.length === 0) {
                return [];
            }
            
            const { inicioGraca, fimGraca } = calcularPeriodoGraca(dados.anoOrcamento);
            
            const pagamentosCalculados = [];
            
            for (let i = 0; i < dados.pagamentos.length; i++) {
                const pagamento = dados.pagamentos[i];
                
                try {
                    if (pagamento.tipoInformacao === 'total') {                        
                        const componentes = await calcularComponentesPagamentoTotal(dados, pagamento);
                        
                        if (!componentes) {
                            console.error(`❌ Erro ao calcular componentes do pagamento ${i + 1}`);
                            continue;
                        }
                        
                        // Adicionar componentes ao pagamento
                        pagamento.valorPrincipal = componentes.valorPrincipal;
                        pagamento.valorJuros = componentes.valorJuros;
                        pagamento.tipoSelic = componentes.tipoSelic;
                        pagamento.percentualSelic = componentes.percentualSelic;
                        pagamento.valorSelic = componentes.valorSelic;
                        pagamento.selicReferencia = componentes.selicReferencia;
                        pagamento.percentualSelicOriginal = componentes.percentualSelicOriginal;
                    }
                    
                    const [ano, mes, dia] = pagamento.dataBase.split('-');
                    const anoBase = parseInt(ano);
                    const mesNumero = parseInt(mes);
                    const mesesNomes = ['', 'janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 
                                    'julho', 'agosto', 'setembro', 'outubro', 'novembro', 'dezembro'];
                    const mesBase = mesesNomes[mesNumero];

                    const dataBase = criarDataBase(mesBase, anoBase);
                    
                    let indicesCNJ = 1;
                    let dadosSelic = { indiceselic: 1 };
                    let indiceipca = 1;
                    let jurosmora = 0;
                    
                    // 1. CNJ sempre aplicar
                    indicesCNJ = obterIndiceCNJ(mesBase, anoBase);
                    
                    // 2. SELIC 
                    const temSelicInformado = (pagamento.tipoSelic === 'valor' && pagamento.valorSelic > 0) || 
                        (pagamento.tipoSelic === 'percentual' && pagamento.percentualSelic > 0);
                    
                    let dataInicioSelic = dataBase;
                    
                    if (temSelicInformado) {
                        dataInicioSelic = new Date(dataBase);
                        if (pagamento.selicReferencia === 'mesAnterior') {
                            // SELIC informado é do mês anterior, então começar da própria data base
                            dataInicioSelic = new Date(dataBase);
                        } else {
                            // SELIC informado é do mesmo mês da data base, então começar do mês seguinte
                            dataInicioSelic = new Date(dataBase);
                            dataInicioSelic.setMonth(dataInicioSelic.getMonth() + 1);
                        }
                    }
                    
                    dadosSelic = await calcularSelic(dataInicioSelic, inicioGraca, fimGraca);
                    
                    let percentualSelicAdicional = 0;
                    
                    if (pagamento.tipoSelic === 'valor' && pagamento.valorSelic > 0) {
                        // Se informou valor em R$, calcular o percentual
                        const totalBase = pagamento.valorPrincipal + pagamento.valorJuros;
                        if (totalBase > 0) {
                            percentualSelicAdicional = pagamento.valorSelic / totalBase;
                        }
                    } else if (pagamento.tipoSelic === 'percentual' && pagamento.percentualSelic > 0) {
                        percentualSelicAdicional = pagamento.percentualSelic;
                    }
                    
                    if (percentualSelicAdicional > 0) {
                        const percentualSelicOriginal = dadosSelic.indiceselic - 1;
                        const percentualSelicTotal = percentualSelicOriginal + percentualSelicAdicional;
                        dadosSelic.indiceselic = 1 + percentualSelicTotal;
                    }
                    
                    // 3. IPCA sempre aplicar
                    indiceipca = await calcularIpca(dataBase, inicioGraca, fimGraca);
                    
                    // 4. Juros de mora sempre aplicar
                    jurosmora = calcularSomaJurosMora(mesBase, anoBase, dados.natureza, inicioGraca, fimGraca) / 100;
                    
                    // Cálculos dos índices compostos
                    const indiceprinc = indicesCNJ * dadosSelic.indiceselic * indiceipca;
                    const indicejur = dadosSelic.indiceselic * indiceipca;
                    
                    // Cálculo de juros de mora
                    const valorjurosmora = pagamento.valorPrincipal * indicesCNJ * jurosmora;
                    const jurosItem = valorjurosmora + (pagamento.valorJuros * indicesCNJ);
                    
                    // Valores atualizados
                    const valorPrincipalAtualizado = pagamento.valorPrincipal * indiceprinc;
                    const valorJurosAtualizado = jurosItem * indicejur;
                    const valorTotalItem = valorPrincipalAtualizado + valorJurosAtualizado;
                    
                    const resultado = {
                        beneficiario: pagamento.beneficiario,
                        dataBase: pagamento.dataBase,
                        valorOriginal: {
                            principal: pagamento.valorPrincipal,
                            juros: pagamento.valorJuros,
                            total: pagamento.valorPrincipal + pagamento.valorJuros
                        },
                        valorAtualizado: {
                            principal: valorPrincipalAtualizado,
                            juros: valorJurosAtualizado,
                            total: valorTotalItem
                        },
                        indices: {
                            cnj: indicesCNJ,
                            selic: dadosSelic.indiceselic,
                            ipca: indiceipca,
                            jurosMora: jurosmora,
                            indicePrincipal: indiceprinc,
                            indiceJuros: indicejur
                        },
                        jurosMoraCalculado: valorjurosmora,
                        selicReferencia: pagamento.selicReferencia,
                        tipoSelic: pagamento.tipoSelic
                    };
                    
                    pagamentosCalculados.push(resultado);
                    
                } catch (error) {
                    console.error(`Erro ao calcular pagamento ${i + 1}:`, error);
                }
            }
            
            return pagamentosCalculados;
        }

        async function calcularComponentesPagamentoTotal(dados, pagamento) {           
            const { inicioGraca, fimGraca } = calcularPeriodoGraca(dados.anoOrcamento);
            
            // Salvar a data atual do campo
            const dataOriginal = document.getElementById("dataatualizacao").value;
            
            try {
                // TEMPORARIAMENTE alterar a data para a data do pagamento
                document.getElementById("dataatualizacao").value = pagamento.dataBase;
                
                // Calcular cada item até a data do pagamento
                let valorPrincipalAtualizado = 0;
                let valorJurosAtualizado = 0;
                let percentualSelicAcumulado = 0;
                
                for (const item of dados.valoresPrincipais) {
                    const itemCalculado = await calcularItemPrincipal(item, dados);
                    valorPrincipalAtualizado += itemCalculado.valorAtualizado.principal;
                    valorJurosAtualizado += itemCalculado.valorAtualizado.juros;
                    
                    // Pegar o percentual de SELIC do item
                    if (item.indices.selic && itemCalculado.indices.selic) {
                        percentualSelicAcumulado = itemCalculado.indices.selic - 1;
                    }
                }
                
                const totalAtualizado = valorPrincipalAtualizado + valorJurosAtualizado;
                
                // Calcular proporção do pagamento sobre o total atualizado
                const proporcao = pagamento.valorTotal / totalAtualizado;
                
                // Aplicar proporção para descobrir quanto foi pago de cada
                const principalPago = valorPrincipalAtualizado * proporcao;
                const jurosPago = valorJurosAtualizado * proporcao;
                
                // Remover a SELIC desses valores pagos
                const indiceSelic = 1 + percentualSelicAcumulado;
                const principalSemSelic = principalPago / indiceSelic;
                const jurosSemSelic = jurosPago / indiceSelic;
                const selicPaga = (principalPago - principalSemSelic) + (jurosPago - jurosSemSelic);
                
                return {
                    valorPrincipal: principalSemSelic,
                    valorJuros: jurosSemSelic,
                    percentualSelicOriginal: percentualSelicAcumulado,
                    tipoSelic: 'percentual',
                    percentualSelic: percentualSelicAcumulado,
                    valorSelic: 0,
                    selicReferencia: 'mesAnterior'
                };
                
            } finally {
                // RESTAURAR a data original do campo
                document.getElementById("dataatualizacao").value = dataOriginal;
            }
        }
        */