// Pagamento devido

        function arredondarParaDuasCasas(valor) {
            return Math.round(valor * 100) / 100;
        }

        function gerarSecoesPagamentos(resultados, dados) {
            // ========== AJUSTAR RESULTADOS SE HOUVER PAGAMENTOS ==========
            const resultadosParaUsar = resultados.saldosFinais 
                ? ajustarResultadosComPagamentos(resultados, dados) 
                : resultados;
            // =============================================================
            
            if (dados.tipoCalculo === 'acordo') {
                return gerarTabelaPagamentosAcordo(resultadosParaUsar, dados);
            }

            const temHerdeiros = resultadosParaUsar.temHerdeiros && resultadosParaUsar.herdeiros.length > 0;

            if (temHerdeiros) {
                return gerarPagamentosComHerdeiros(resultadosParaUsar, dados);
            } else {
                return gerarPagamentosSemHerdeiros(resultadosParaUsar, dados);
            }
        }

        function gerarTabelaPagamentosAcordo(resultados, dados) {
            if (dados.tipoCalculo !== 'acordo') return '';
            
            const adesoes = obterAdesaoAcordo();
            const percentualDesagio = dados.percentualAcordo || 0;
            const pagamentosAcordo = [];
            
            // 1. BENEFICIÁRIO PRINCIPAL
            if (adesoes.beneficiario && resultados.valorBeneficiarioFinal > 0) {
                const valorDevido = arredondarParaDuasCasas(resultados.valorBeneficiarioAposCessoes);
                const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                const previdencia = arredondarParaDuasCasas(resultados.valorPrevidenciaBeneficiario);
                const ir = arredondarParaDuasCasas(resultados.valorIRBeneficiario);
                const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                
                pagamentosAcordo.push({
                    credor: `${dados.beneficiario} (Beneficiário)`,
                    valorDevido: valorDevido,
                    valorDesagio: valorDesagio,
                    valorAposDesagio: valorAposDesagio,
                    previdencia: previdencia,
                    ir: ir,
                    valorLiquido: valorLiquido,
                    rra: resultados.rraComDesagio || resultados.rrapagamento
                });
            }
            
            // 2. HERDEIROS QUE ADERIRAM
            if (resultados.temHerdeiros && adesoes.herdeiros.length > 0) {
                resultados.herdeiros.forEach((herdeiro, index) => {
                    if (adesoes.herdeiros.includes(index) && herdeiro.valorLiquido > 0) {
                        const temCessoes = herdeiro.cessoesHerdeiro && herdeiro.cessoesHerdeiro.length > 0;
                        const valorDevidoOriginal = temCessoes ? herdeiro.valorFinalAposCessoes : herdeiro.valorBruto;
                        const previdenciaOriginal = temCessoes ? herdeiro.valorPrevidenciaFinal : herdeiro.valorPrevidencia;
                        const irOriginal = temCessoes ? herdeiro.valorIRFinal : herdeiro.valorIR;
                        
                        const valorDevido = arredondarParaDuasCasas(valorDevidoOriginal);
                        const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                        const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                        const previdencia = arredondarParaDuasCasas(previdenciaOriginal);
                        const ir = arredondarParaDuasCasas(irOriginal);
                        const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                        
                        pagamentosAcordo.push({
                            credor: `${herdeiro.nome} (Herdeiro)`,
                            valorDevido: valorDevido,
                            valorDesagio: valorDesagio,
                            valorAposDesagio: valorAposDesagio,
                            previdencia: previdencia,
                            ir: ir,
                            valorLiquido: valorLiquido,
                            rra: herdeiro.rraComDesagio || herdeiro.rrapagamento
                        });
                    }
                });
            }

            //3. ADVOGADOS CONTRATUAIS QUE ADERIRAM
            if (adesoes.advogados.length > 0 && resultados.honorarios) {
                resultados.honorarios.forEach((advogado, index) => {
                    if (adesoes.advogados.includes(index) && advogado.valorBrutoAdvogado > 0) {
                        const valorDevido = arredondarParaDuasCasas(advogado.valorBrutoAdvogado);
                        const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                        const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                        const previdencia = 0;
                        const ir = arredondarParaDuasCasas(advogado.irAdvogado || 0);
                        const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                        
                        pagamentosAcordo.push({
                            credor: `${advogado.nome} (Adv. ${advogado.tipo})`,
                            valorDevido: valorDevido,
                            valorDesagio: valorDesagio,
                            valorAposDesagio: valorAposDesagio,
                            previdencia: previdencia,
                            ir: ir,
                            valorLiquido: valorLiquido,
                            rra: '-'
                        });
                    }
                });
            }

            if (adesoes.advogadosSucumbenciais && adesoes.advogadosSucumbenciais.length > 0 && 
                resultados.honorariosSucumbenciais?.temHonorariosSucumbenciais) {
                
                resultados.honorariosSucumbenciais.honorarios.forEach((advogado, index) => {
                    if (adesoes.advogadosSucumbenciais.includes(index) && advogado.valorBrutoAdvogado > 0) {
                        const valorDevido = arredondarParaDuasCasas(advogado.valorBrutoAdvogado);
                        const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                        const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                        const previdencia = 0;
                        const ir = arredondarParaDuasCasas(advogado.irAdvogado || 0);
                        const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                        
                        pagamentosAcordo.push({
                            credor: `${advogado.nome} (Adv. Sucumb. ${advogado.tipo})`,
                            valorDevido: valorDevido,
                            valorDesagio: valorDesagio,
                            valorAposDesagio: valorAposDesagio,
                            previdencia: previdencia,
                            ir: ir,
                            valorLiquido: valorLiquido,
                            rra: '-'
                        });
                    }
                });
            }
            
            // 5. SINDICATOS QUE ADERIRAM
            if (adesoes.sindicatos.length > 0 && resultados.sindicatos) {
                resultados.sindicatos.forEach((sindicato, index) => {
                    if (adesoes.sindicatos.includes(index) && sindicato.valorBrutoSindicato > 0) {
                        const valorDevido = arredondarParaDuasCasas(sindicato.valorBrutoSindicato);
                        const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                        const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                        const previdencia = 0;
                        const ir = arredondarParaDuasCasas(sindicato.irSindicato || 0);
                        const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                        
                        pagamentosAcordo.push({
                            credor: `${sindicato.nome} (Sindicato)`,
                            valorDevido: valorDevido,
                            valorDesagio: valorDesagio,
                            valorAposDesagio: valorAposDesagio,
                            previdencia: previdencia,
                            ir: ir,
                            valorLiquido: valorLiquido,
                            rra: '-'
                        });
                    }
                });
            }
            
            //6. CESSIONÁRIOS QUE ADERIRAM
            if (adesoes.cessionarios.length > 0) {
                adesoes.cessionarios.forEach(cessaoIndex => {
                    const cessao = dados.cessoes[cessaoIndex];
                    if (!cessao) return;
                    
                    // Cessionários do beneficiário
                    if (cessao.tipo === 'cessaobenPrincipal' && resultados.cessoesBeneficiarioFinais) {
                        const cessionarioData = resultados.cessoesBeneficiarioFinais.find(c => c.cessionario === cessao.cessionario);
                        if (cessionarioData && cessionarioData.valorLiquido > 0) {
                            const valorDevido = arredondarParaDuasCasas(cessionarioData.valorBruto);
                            const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                            const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                            const previdencia = arredondarParaDuasCasas(cessionarioData.previdenciaCessao);
                            const ir = arredondarParaDuasCasas(cessionarioData.irCessao);
                            const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                            
                            pagamentosAcordo.push({
                                credor: `${cessao.cessionario} (Cess. de ${dados.beneficiario})`,
                                valorDevido: valorDevido,
                                valorDesagio: valorDesagio,
                                valorAposDesagio: valorAposDesagio,
                                previdencia: previdencia,
                                ir: ir,
                                valorLiquido: valorLiquido,
                                rra: resultados.rraComDesagio || resultados.rrapagamento
                            });
                        }
                    }
                    
                    // Cessionários de herdeiros
                    if (cessao.tipo === 'cessaoherdeiro' && resultados.temHerdeiros) {
                        const herdeiro = resultados.herdeiros.find(h => h.nome === cessao.cedente);
                        if (herdeiro && herdeiro.cessoesHerdeiro) {
                            const cessionarioData = herdeiro.cessoesHerdeiro.find(c => c.cessionario === cessao.cessionario);
                            if (cessionarioData && cessionarioData.valorLiquido > 0) {
                                const valorDevido = arredondarParaDuasCasas(cessionarioData.valorBruto);
                                const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                                const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                                const previdencia = arredondarParaDuasCasas(cessionarioData.previdenciaCessao);
                                const ir = arredondarParaDuasCasas(cessionarioData.irCessao);
                                const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                                
                                pagamentosAcordo.push({
                                    credor: `${cessao.cessionario} (Cess. de ${herdeiro.nome})`,
                                    valorDevido: valorDevido,
                                    valorDesagio: valorDesagio,
                                    valorAposDesagio: valorAposDesagio,
                                    previdencia: previdencia,
                                    ir: ir,
                                    valorLiquido: valorLiquido,
                                    rra: herdeiro.rraComDesagio || herdeiro.rrapagamento
                                });
                            }
                        }
                    }
                    
                    // Cessionários de advogados contratuais
                    if (cessao.tipo === 'cessaoAdv') {
                        let cessionarioEncontrado = false;
                        
                        if (resultados.honorarios) {
                            const advogado = resultados.honorarios.find(adv => adv.nome === cessao.cedente);
                            if (advogado && advogado.cessionarios) {
                                const cessionarioData = advogado.cessionarios.find(c => c.nome === cessao.cessionario);
                                if (cessionarioData && cessionarioData.valorLiquido > 0) {
                                    const valorDevido = arredondarParaDuasCasas(cessionarioData.valorBruto);
                                    const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                                    const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                                    const previdencia = 0;
                                    const ir = arredondarParaDuasCasas(cessionarioData.ir);
                                    const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                                    
                                    pagamentosAcordo.push({
                                        credor: `${cessao.cessionario} (Cess. de ${cessao.cedente})`,
                                        valorDevido: valorDevido,
                                        valorDesagio: valorDesagio,
                                        valorAposDesagio: valorAposDesagio,
                                        previdencia: previdencia,
                                        ir: ir,
                                        valorLiquido: valorLiquido,
                                        rra: '-'
                                    });
                                    cessionarioEncontrado = true;
                                }
                            }
                        }
                        
                        // Verificar nos advogados dos herdeiros
                        if (!cessionarioEncontrado && resultados.temHerdeiros) {
                            resultados.herdeiros.forEach(herdeiro => {
                                if (herdeiro.honorarios) {
                                    const advogado = herdeiro.honorarios.find(adv => adv.nome === cessao.cedente);
                                    if (advogado && advogado.cessionarios) {
                                        const cessionarioData = advogado.cessionarios.find(c => c.nome === cessao.cessionario);
                                        if (cessionarioData && cessionarioData.valorLiquido > 0) {
                                            const valorDevido = arredondarParaDuasCasas(cessionarioData.valorBruto);
                                            const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                                            const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                                            const previdencia = 0;
                                            const ir = arredondarParaDuasCasas(cessionarioData.ir);
                                            const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                                            
                                            pagamentosAcordo.push({
                                                credor: `${cessao.cessionario} (Cess. de ${cessao.cedente})`,
                                                valorDevido: valorDevido,
                                                valorDesagio: valorDesagio,
                                                valorAposDesagio: valorAposDesagio,
                                                previdencia: previdencia,
                                                ir: ir,
                                                valorLiquido: valorLiquido,
                                                rra: '-'
                                            });
                                        }
                                    }
                                }
                            });
                        }
                    }

                    //Cessao de adv sucumbencial
                    if (cessao.tipo === 'cessaoAdvSuc') {
                        if (resultados.honorariosSucumbenciais?.honorarios) {
                            const advogado = resultados.honorariosSucumbenciais.honorarios.find(adv => adv.nome === cessao.cedente);
                            if (advogado && advogado.cessionarios) {
                                const cessionarioData = advogado.cessionarios.find(c => c.nome === cessao.cessionario);
                                if (cessionarioData && cessionarioData.valorLiquido > 0) {
                                    const valorDevido = arredondarParaDuasCasas(cessionarioData.valorBruto);
                                    const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                                    const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                                    const previdencia = 0;
                                    const ir = arredondarParaDuasCasas(cessionarioData.ir);
                                    const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                                    
                                    pagamentosAcordo.push({
                                        credor: `${cessao.cessionario} (Cess. Adv. Sucumb. ${cessao.cedente})`,
                                        valorDevido: valorDevido,
                                        valorDesagio: valorDesagio,
                                        valorAposDesagio: valorAposDesagio,
                                        previdencia: previdencia,
                                        ir: ir,
                                        valorLiquido: valorLiquido,
                                        rra: '-'
                                    });
                                }
                            }
                        }
                    }
                    
                    // Cessionários de sindicatos
                    if (cessao.tipo === 'cessaoSind') {
                        let cessionarioEncontrado = false;
                        
                        // Verificar nos sindicatos do beneficiário
                        if (resultados.sindicatos) {
                            const sindicato = resultados.sindicatos.find(sind => sind.nome === cessao.cedente);
                            if (sindicato && sindicato.cessionarios) {
                                const cessionarioData = sindicato.cessionarios.find(c => c.nome === cessao.cessionario);
                                if (cessionarioData && cessionarioData.valorLiquido > 0) {
                                    const valorDevido = arredondarParaDuasCasas(cessionarioData.valorBruto);
                                    const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                                    const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                                    const previdencia = 0;
                                    const ir = arredondarParaDuasCasas(cessionarioData.ir);
                                    const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                                    
                                    pagamentosAcordo.push({
                                        credor: `${cessao.cessionario} (Cess. de ${cessao.cedente})`,
                                        valorDevido: valorDevido,
                                        valorDesagio: valorDesagio,
                                        valorAposDesagio: valorAposDesagio,
                                        previdencia: previdencia,
                                        ir: ir,
                                        valorLiquido: valorLiquido,
                                        rra: '-'
                                    });
                                    cessionarioEncontrado = true;
                                }
                            }
                        }
                        
                        // Verificar nos sindicatos dos herdeiros
                        if (!cessionarioEncontrado && resultados.temHerdeiros) {
                            resultados.herdeiros.forEach(herdeiro => {
                                if (herdeiro.sindicatos) {
                                    const sindicato = herdeiro.sindicatos.find(sind => sind.nome === cessao.cedente);
                                    if (sindicato && sindicato.cessionarios) {
                                        const cessionarioData = sindicato.cessionarios.find(c => c.nome === cessao.cessionario);
                                        if (cessionarioData && cessionarioData.valorLiquido > 0) {
                                            const valorDevido = arredondarParaDuasCasas(cessionarioData.valorBruto);
                                            const valorDesagio = arredondarParaDuasCasas(valorDevido * percentualDesagio);
                                            const valorAposDesagio = arredondarParaDuasCasas(valorDevido - valorDesagio);
                                            const previdencia = 0;
                                            const ir = arredondarParaDuasCasas(cessionarioData.ir);
                                            const valorLiquido = arredondarParaDuasCasas(valorAposDesagio - previdencia - ir);
                                            
                                            pagamentosAcordo.push({
                                                credor: `${cessao.cessionario} (Cess. de ${cessao.cedente})`,
                                                valorDevido: valorDevido,
                                                valorDesagio: valorDesagio,
                                                valorAposDesagio: valorAposDesagio,
                                                previdencia: previdencia,
                                                ir: ir,
                                                valorLiquido: valorLiquido,
                                                rra: '-'
                                            });
                                        }
                                    }
                                }
                            });
                        }
                    }
                });
            }
            
            if (pagamentosAcordo.length === 0) return '';
    
            // GERAR 1ª TABELA: Cálculo do Deságio
            const linhasCalculo = pagamentosAcordo.map(pagamento => `
                <tr>
                    <td>${pagamento.credor}</td>
                    <td>R$ ${formatarMoeda(pagamento.valorDevido)}</td>
                    <td>R$ ${formatarMoeda(pagamento.valorDesagio)}</td>
                    <td>R$ ${formatarMoeda(pagamento.valorAposDesagio)}</td>
                </tr>
            `).join('');
            
            // GERAR 2ª TABELA: Pagamentos Finais
            const linhasPagamento = pagamentosAcordo.map(pagamento => `
                <tr>
                    <td>${pagamento.credor}</td>
                    <td>R$ ${formatarMoeda(pagamento.valorAposDesagio)}</td>
                    <td>R$ ${formatarMoeda(pagamento.previdencia)}</td>
                    <td>R$ ${formatarMoeda(pagamento.ir)}</td>
                    <td>R$ ${formatarMoeda(pagamento.valorLiquido)}</td>
                    <td>${pagamento.rra}</td>
                </tr>
            `).join('');
            
            // Calcular totais
            const totais = {
                valorDevido: pagamentosAcordo.reduce((total, p) => total + p.valorDevido, 0),
                valorDesagio: pagamentosAcordo.reduce((total, p) => total + p.valorDesagio, 0),
                valorAposDesagio: pagamentosAcordo.reduce((total, p) => total + p.valorAposDesagio, 0),
                previdencia: pagamentosAcordo.reduce((total, p) => total + p.previdencia, 0),
                ir: pagamentosAcordo.reduce((total, p) => total + p.ir, 0),
                valorLiquido: pagamentosAcordo.reduce((total, p) => total + p.valorLiquido, 0)
            };
            
            return `
                    <!-- 1ª TABELA: Cálculo do Deságio -->
                    <div class="table-container">
                        <h3>📊 Cálculo do Deságio ${(percentualDesagio * 100).toFixed(2)}%</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Credor</th>
                                    <th>Valor Devido</th>
                                    <th>Deságio ${(percentualDesagio * 100).toFixed(2)}%</th>
                                    <th>Valor Após Deságio</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${linhasCalculo}
                            </tbody>
                            <tfoot>
                                <tr class="highlight">
                                    <td><strong>TOTAL</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totais.valorDevido)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totais.valorDesagio)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totais.valorAposDesagio)}</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                <div class="pagamentos-acordo">
                    <!-- 2ª TABELA: Valores Finais para Pagamento -->
                    <div class="table-container">
                        <h3>💰 Pagamento do Acordo</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Credor</th>
                                    <th>Valor Base</th>
                                    <th>Previdência</th>
                                    <th>IR</th>
                                    <th>Valor Líquido</th>
                                    <th>RRA</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${linhasPagamento}
                            </tbody>
                            <tfoot>
                                <tr class="highlight">
                                    <td><strong>TOTAL</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totais.valorAposDesagio)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totais.previdencia)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totais.ir)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totais.valorLiquido)}</strong></td>
                                    <td><strong>-</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                        <div style="margin-top: 15px; padding: 10px; background-color: #fff3cd; border-radius: 5px; border-left: 4px solid #ffc107;">
                            <h4>⚖️ Informações do Acordo:</h4>
                            <p style="margin: 5px 0;"><strong>Deságio aplicado:</strong> ${(percentualDesagio * 100).toFixed(2)}% sobre o valor devido</p>
                            <p style="margin: 5px 0;"><strong>Tributos calculados:</strong> Sobre o valor após deságio</p>
                            <p style="margin: 5px 0;"><strong>Apenas credores que aderiram</strong> ao acordo aparecem nesta tabela</p>
                        </div>
                    </div>
                </div>
            `;
        }

        function gerarPagamentosComHerdeiros(resultados, dados) {
            const isPreferencia = dados.tipoCalculo === 'preferencia';
            
            const herdeirosParaPagar = isPreferencia 
                ? resultados.herdeiros.filter(h => h.temPreferencia || h.isPreferenciaParcial)
                : resultados.herdeiros;
            
            const herdeirosComPagamentos = herdeirosParaPagar.filter(h => {
                return h.valorLiquido > 0 || (h.cessoesHerdeiro && h.cessoesHerdeiro.length > 0);
            });
            
            if (herdeirosComPagamentos.length === 0) return '';
            
            let secaoCessionariosBeneficiario = '';
            if (resultados.cessoesBeneficiarioFinais && resultados.cessoesBeneficiarioFinais.length > 0) {
                const cessionariosBeneficiario = resultados.cessoesBeneficiarioFinais.filter(cessao => cessao.valorLiquido > 0);
                
                if (cessionariosBeneficiario.length > 0) {
                    const linhasCessionarios = cessionariosBeneficiario.map(cessao => {
                        const valorDevidoArredondado = arredondarParaDuasCasas(cessao.valorBruto);
                        const previdenciaArredondada = arredondarParaDuasCasas(cessao.previdenciaCessao);
                        const irArredondado = arredondarParaDuasCasas(cessao.irCessao);
                        const valorLiquidoCalculado = arredondarParaDuasCasas(valorDevidoArredondado - previdenciaArredondada - irArredondado);
                        
                        return `
                            <tr>
                                <td>${cessao.cessionario} (Cessionário de ${dados.beneficiario})</td>
                                <td>R$ ${formatarMoeda(valorDevidoArredondado)}</td>
                                <td>R$ ${formatarMoeda(previdenciaArredondada)}</td>
                                <td>R$ ${formatarMoeda(irArredondado)}</td>
                                <td>R$ ${formatarMoeda(valorLiquidoCalculado)}</td>
                            </tr>
                        `;
                    }).join('');
                    
                    const totalCessionarios = calcularTotalCessionariosBeneficiario(cessionariosBeneficiario);
                    
                    secaoCessionariosBeneficiario = `
                        <div class="pagamentos-finais" style="margin-bottom: 20px;">
                            <div class="table-container">
                                <h3>📊 Cessionários do Beneficiário Principal</h3>
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Credor</th>
                                            <th>Valor Devido</th>
                                            <th>Previdência</th>
                                            <th>Imposto de Renda</th>
                                            <th>Valor Líquido</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${linhasCessionarios}
                                    </tbody>
                                    <tfoot>
                                        <tr class="highlight">
                                            <td><strong>TOTAL CESSIONÁRIOS</strong></td>
                                            <td><strong>R$ ${formatarMoeda(totalCessionarios.totalDevido)}</strong></td>
                                            <td><strong>R$ ${formatarMoeda(totalCessionarios.totalPrevidencia)}</strong></td>
                                            <td><strong>R$ ${formatarMoeda(totalCessionarios.totalIR)}</strong></td>
                                            <td><strong>R$ ${formatarMoeda(totalCessionarios.totalLiquido)}</strong></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                        </div>
                    `;
                }
            }
            
            const secoesHerdeiros = herdeirosComPagamentos.map(herdeiro => 
                gerarTabelaHerdeiro(herdeiro, dados, isPreferencia, herdeirosComPagamentos.length)
            ).join('');
            
            const todosPagamentos = coletarTodosPagamentos(resultados, dados);

            const totaisGerais = {
                totalDevido: calcularTotalDevido(todosPagamentos),
                totalPrevidencia: calcularTotalPrevidencia(todosPagamentos),
                totalIR: calcularTotalIR(todosPagamentos),
                totalLiquido: calcularTotalLiquido(todosPagamentos)
            };

            const tabelaHonorariosSucumbenciais = gerarTabelaHonorariosSucumbenciais(resultados, dados);
            
            const temHonorariosSucumbenciais = resultados.honorariosSucumbenciais?.honorarios?.some(adv => adv.temPreferencia) || false;

            const mostrarResumoGeral = herdeirosComPagamentos.length > 1 || temHonorariosSucumbenciais;

            return `
                ${secaoCessionariosBeneficiario}
                ${secoesHerdeiros}
                ${tabelaHonorariosSucumbenciais}
                ${mostrarResumoGeral ? `
                <div class="pagamentos-finais" style="margin-top: 30px;">
                    <div class="table-container">
                        <h3>🎯 RESUMO GERAL DE TODOS OS PAGAMENTOS</h3>
                        <table style="background-color: #f8f9fa;">
                            <thead>
                                <tr style="background-color: #e9ecef;">
                                    <th>Total Geral</th>
                                    <th>Valor Devido</th>
                                    <th>Previdência</th>
                                    <th>Imposto de Renda</th>
                                    <th>Valor Líquido</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="highlight" style="font-weight: bold; font-size: 1.1em;">
                                    <td><strong>TOTAL FINAL</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totaisGerais.totalDevido)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totaisGerais.totalPrevidencia)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totaisGerais.totalIR)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totaisGerais.totalLiquido)}</strong></td>
                                </tr>
                            </tbody>
                        </table>
                        
                        <div style="margin-top: 15px; padding: 10px; background-color: #f9f9f9; border-radius: 5px;">
                            <h4>📋 Notas sobre Tributação do Imposto de Renda:</h4>
                            <p style="margin: 5px 0;"><strong>Advogados Pessoa Física (PF):</strong> 🏦 LEI Nº 15.191, DE 11 DE AGOSTO DE 2025</p>
                            <p style="margin: 5px 0;"><strong>Advogados Pessoa Jurídica (PJ):</strong> 🏦 DECRETO 9.580, art 714</p>
                            <p style="margin: 5px 0;"><strong>Sindicatos:</strong> Tributação conforme Art. 27, da Lei nº 10.833/03 ou alíquota fixa quando aplicável</p>
                        </div>
                    </div>
                </div>
                ` : ''}
            `;
        }

        function gerarTabelaHerdeiro(herdeiro, dados, isPreferencia, totalHerdeiros) {
            const pagamentosHerdeiro = [];
            
            // 1. O próprio herdeiro
            const temCessoesHerdeiro = herdeiro.cessoesHerdeiro && herdeiro.cessoesHerdeiro.length > 0;
            const valorDevido = temCessoesHerdeiro ? herdeiro.valorFinalAposCessoes : herdeiro.valorBruto;
            const previdencia = temCessoesHerdeiro ? herdeiro.valorPrevidenciaFinal : herdeiro.valorPrevidencia;
            const ir = temCessoesHerdeiro ? herdeiro.valorIRFinal : herdeiro.valorIR;
            
            if (herdeiro.valorLiquido > 0) {
                pagamentosHerdeiro.push({
                    credor: `${herdeiro.nome} (Herdeiro)`,
                    valorDevido: valorDevido,
                    previdencia: previdencia,
                    ir: ir,
                    valorLiquido: herdeiro.valorLiquido
                });
            }
            
            // 2. Cessionários do herdeiro (só ordem cronológica)
            if (!isPreferencia && herdeiro.cessoesHerdeiro && herdeiro.cessoesHerdeiro.length > 0) {
                herdeiro.cessoesHerdeiro
                    .filter(cessao => cessao.valorLiquido && cessao.valorLiquido > 0)
                    .forEach(cessao => {
                        pagamentosHerdeiro.push({
                            credor: `${cessao.cessionario} (Cessionário de ${herdeiro.nome})`,
                            valorDevido: cessao.valorBruto,
                            previdencia: cessao.previdenciaCessao,
                            ir: cessao.irCessao,
                            valorLiquido: cessao.valorLiquido
                        });
                    });
            }
            
            // 3. Advogados deste herdeiro
            if (herdeiro.honorarios && herdeiro.honorarios.length > 0) {
                herdeiro.honorarios.forEach(adv => {
                    let devePagarAdvogado = false;
                    
                    if (isPreferencia) {
                        devePagarAdvogado = herdeiro.temPreferencia || herdeiro.isPreferenciaParcial;
                    } else {
                        devePagarAdvogado = true;
                    }
                    
                    if (devePagarAdvogado && adv.valorBrutoAdvogado > 0) {
                        pagamentosHerdeiro.push({
                            credor: `${adv.nome} (Advogado ${adv.tipo})`,
                            valorDevido: adv.valorBrutoAdvogado,
                            previdencia: 0,
                            ir: adv.irAdvogado || 0,
                            valorLiquido: adv.valorLiquidoAdvogado
                        });
                        
                        // Cessionários do advogado
                        if (adv.cessionarios && adv.cessionarios.length > 0) {
                            let cessionariosDevemReceber = false;
                            
                            if (isPreferencia) {
                                cessionariosDevemReceber = herdeiro.temPreferencia && !herdeiro.isPreferenciaParcial;
                            } else {
                                cessionariosDevemReceber = true;
                            }
                            
                            if (cessionariosDevemReceber) {
                                adv.cessionarios.forEach(cessionario => {
                                    pagamentosHerdeiro.push({
                                        credor: `${cessionario.nome} (Cessionário de ${adv.nome})`,
                                        valorDevido: cessionario.valorBruto,
                                        previdencia: 0,
                                        ir: cessionario.ir || 0,
                                        valorLiquido: cessionario.valorLiquido
                                    });
                                });
                            }
                        }
                    }
                });
            }
            
            // 4. Sindicatos deste herdeiro
            if (herdeiro.sindicatos && herdeiro.sindicatos.length > 0) {
                herdeiro.sindicatos.forEach(sind => {
                    let devePagarSindicato = false;
                    
                    if (isPreferencia) {
                        devePagarSindicato = false;
                    } else {
                        // Na ordem
                        devePagarSindicato = true;
                    }
                    
                    if (devePagarSindicato) {
                        // Se sindicato tem cessionários, só mostra o sindicato se ele ainda tem valor próprio
                        const temCessionarios = sind.cessionarios && sind.cessionarios.length > 0;
                        
                        if (!temCessionarios && sind.valorBrutoSindicato > 0) {
                            pagamentosHerdeiro.push({
                                credor: `${sind.nome} (Sindicato)`,
                                valorDevido: sind.valorBrutoSindicato,
                                previdencia: 0,
                                ir: sind.irSindicato || 0,
                                valorLiquido: sind.valorLiquidoSindicato
                            });
                        } else if (temCessionarios) {
                            if (sind.valorBrutoSindicato > 0) {
                                pagamentosHerdeiro.push({
                                    credor: `${sind.nome} (Sindicato)`,
                                    valorDevido: sind.valorBrutoSindicato,
                                    previdencia: 0,
                                    ir: sind.irSindicato || 0,
                                    valorLiquido: sind.valorLiquidoSindicato
                                });
                            }
                            
                            sind.cessionarios.forEach(cessionario => {
                                if (cessionario.valorBruto > 0) {
                                    pagamentosHerdeiro.push({
                                        credor: `${cessionario.nome} (Cessionário de ${sind.nome})`,
                                        valorDevido: cessionario.valorBruto,
                                        previdencia: 0,
                                        ir: cessionario.ir || 0,
                                        valorLiquido: cessionario.valorLiquido
                                    });
                                }
                            });
                        }
                    }
                });
            }
            
            // Tabela para este herdeiro
            const linhas = pagamentosHerdeiro.map(pagamento => {
                const valorDevidoArredondado = arredondarParaDuasCasas(pagamento.valorDevido);
                const previdenciaArredondada = arredondarParaDuasCasas(pagamento.previdencia);
                const irArredondado = arredondarParaDuasCasas(pagamento.ir);
                const valorLiquidoCalculado = arredondarParaDuasCasas(valorDevidoArredondado - previdenciaArredondada - irArredondado);
                
                return `
                    <tr>
                        <td>${pagamento.credor}</td>
                        <td>R$ ${formatarMoeda(valorDevidoArredondado)}</td>
                        <td>R$ ${formatarMoeda(previdenciaArredondada)}</td>
                        <td>R$ ${formatarMoeda(irArredondado)}</td>
                        <td>R$ ${formatarMoeda(valorLiquidoCalculado)}</td>
                    </tr>
                `;
            }).join('');
            
            const totaisHerdeiro = {
                totalDevido: pagamentosHerdeiro.reduce((total, p) => total + arredondarParaDuasCasas(p.valorDevido), 0),
                totalPrevidencia: pagamentosHerdeiro.reduce((total, p) => total + arredondarParaDuasCasas(p.previdencia), 0),
                totalIR: pagamentosHerdeiro.reduce((total, p) => total + arredondarParaDuasCasas(p.ir), 0),
                totalLiquido: pagamentosHerdeiro.reduce((total, p) => {
                    const valorDevidoArr = arredondarParaDuasCasas(p.valorDevido);
                    const previdenciaArr = arredondarParaDuasCasas(p.previdencia);
                    const irArr = arredondarParaDuasCasas(p.ir);
                    return total + arredondarParaDuasCasas(valorDevidoArr - previdenciaArr - irArr);
                }, 0)
            };
            
            const statusHerdeiro = isPreferencia ? 
                (herdeiro.isPreferenciaParcial ? ' (Preferência Parcial)' : ' (Preferência Total)') : 
                ' (Ordem Cronológica)';
            
            const mostrarTotalHerdeiro = true;
            
            return `
                <div class="pagamentos-finais" style="margin-bottom: 20px;">
                    <div class="table-container">
                        <h3>📊 Pagamentos - ${herdeiro.nome}${statusHerdeiro}</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Credor</th>
                                    <th>Valor Devido</th>
                                    <th>Previdência</th>
                                    <th>Imposto de Renda</th>
                                    <th>Valor Líquido</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${linhas}
                            </tbody>
                            ${mostrarTotalHerdeiro ? `
                            <tfoot>
                                <tr class="highlight">
                                    <td><strong>TOTAL</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totaisHerdeiro.totalDevido)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totaisHerdeiro.totalPrevidencia)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totaisHerdeiro.totalIR)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totaisHerdeiro.totalLiquido)}</strong></td>
                                </tr>
                            </tfoot>
                            ` : ''}
                        </table>
                        ${totalHerdeiros === 1 ? `
                        <div style="margin-top: 15px; padding: 10px; background-color: #f9f9f9; border-radius: 5px;">
                            <h4>📋 Notas sobre Tributação do Imposto de Renda:</h4>
                            <p style="margin: 5px 0;"><strong>Advogados Pessoa Física (PF):</strong> 🏦 LEI Nº 15.191, DE 11 DE AGOSTO DE 2025</p>
                            <p style="margin: 5px 0;"><strong>Advogados Pessoa Jurídica (PJ):</strong> 🏦 DECRETO 9.580, art 714</p>
                            <p style="margin: 5px 0;"><strong>Sindicatos:</strong> Tributação conforme Art. 27, da Lei nº 10.833/03 ou alíquota fixa quando aplicável</p>
                        </div>
                        ` : ''}
                    </div>
                </div>
            `;
        }

        function gerarTabelaHonorariosSucumbenciais(resultados, dados) {
            // Verificar se tem honorários sucumbenciais
            if (!resultados.honorariosSucumbenciais?.temHonorariosSucumbenciais || 
                !resultados.honorariosSucumbenciais?.honorarios?.length) {
                return '';
            }

            const honorarios = resultados.honorariosSucumbenciais.honorarios;
            const isPreferencia = dados.tipoCalculo === 'preferencia';
            const pagamentos = [];
            
            honorarios.forEach(adv => {
                // ADVOGADO SUCUMBENCIAL
                let deveReceberAdvogado = true;
                let valorAdvogadoPagamento = adv.valorBrutoAdvogado;
                
                if (isPreferencia && !adv.temPreferencia) {
                    deveReceberAdvogado = false;
                }
                
                if (deveReceberAdvogado && valorAdvogadoPagamento > 0) {
                    pagamentos.push({
                        credor: `${adv.nome} (Adv. Sucumbencial ${adv.tipo})`,
                        valorDevido: valorAdvogadoPagamento,
                        previdencia: 0,
                        ir: adv.irAdvogado || 0,
                        valorLiquido: adv.valorLiquidoAdvogado || 0
                    });
                }
                
                // CESSIONÁRIOS DO ADVOGADO SUCUMBENCIAL
                if (isPreferencia) {
                    // Na preferência: cessionários só recebem se não foi limitado
                    if (adv.temPreferencia && !adv.foiLimitadoPorPreferencia && adv.cessionarios?.length > 0) {
                        adv.cessionarios.forEach(cessionario => {
                            if (cessionario.valorLiquido > 0) {
                                pagamentos.push({
                                    credor: `${cessionario.nome} (Cess. Adv. Sucumb. ${adv.nome})`,
                                    valorDevido: cessionario.valorBruto,
                                    previdencia: 0,
                                    ir: cessionario.ir || 0,
                                    valorLiquido: cessionario.valorLiquido
                                });
                            }
                        });
                    }
                } else {
                    // Ordem/Parcial: cessionários sempre recebem
                    if (adv.cessionarios?.length > 0) {
                        adv.cessionarios.forEach(cessionario => {
                            if (cessionario.valorLiquido > 0) {
                                pagamentos.push({
                                    credor: `${cessionario.nome} (Cess. Adv. Sucumb. ${adv.nome})`,
                                    valorDevido: cessionario.valorBruto,
                                    previdencia: 0,
                                    ir: cessionario.ir || 0,
                                    valorLiquido: cessionario.valorLiquido
                                });
                            }
                        });
                    }
                }
            });
            
            if (pagamentos.length === 0) return '';
            
            // Calcular totais
            const totalDevido = pagamentos.reduce((sum, p) => sum + p.valorDevido, 0);
            const totalPrevidencia = pagamentos.reduce((sum, p) => sum + p.previdencia, 0);
            const totalIR = pagamentos.reduce((sum, p) => sum + p.ir, 0);
            const totalLiquido = pagamentos.reduce((sum, p) => sum + p.valorLiquido, 0);
            
            return `
                <div class="pagamentos-finais" style="margin-bottom: 20px;">
                    <div class="table-container">
                        <h3>💼 Pagamentos - Honorários Sucumbenciais</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Credor</th>
                                    <th>Valor Devido</th>
                                    <th>Previdência</th>
                                    <th>Imposto de Renda</th>
                                    <th>Valor Líquido</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${pagamentos.map(pagamento => `
                                    <tr>
                                        <td>${pagamento.credor}</td>
                                        <td>R$ ${formatarMoeda(pagamento.valorDevido)}</td>
                                        <td>R$ ${formatarMoeda(pagamento.previdencia)}</td>
                                        <td>R$ ${formatarMoeda(pagamento.ir)}</td>
                                        <td>R$ ${formatarMoeda(pagamento.valorLiquido)}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                            <tfoot>
                                <tr class="highlight">
                                    <td><strong>Total Honorários Sucumbenciais</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totalDevido)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totalPrevidencia)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totalIR)}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(totalLiquido)}</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                `;
        }

        function coletarTodosPagamentos(resultados, dados) {
            const pagamentos = [];
            const temHerdeiros = resultados.temHerdeiros && resultados.herdeiros.length > 0;
            
            if (temHerdeiros) {
                const isPreferencia = dados.tipoCalculo === 'preferencia';
                
                // Cessionários do Beneficiário
                if (resultados.cessoesBeneficiarioFinais) {
                    resultados.cessoesBeneficiarioFinais
                        .filter(cessao => cessao.valorLiquido && cessao.valorLiquido > 0)
                        .forEach(cessao => {
                            pagamentos.push({
                                credor: `${cessao.cessionario} (Cessionário de ${dados.beneficiario})`,
                                valorDevido: cessao.valorBruto,
                                previdencia: cessao.previdenciaCessao,
                                ir: cessao.irCessao,
                                valorLiquido: cessao.valorLiquido
                            });
                        });
                }
                
                // Herdeiros
                const herdeirosParaPagar = isPreferencia 
                    ? resultados.herdeiros.filter(h => h.temPreferencia || h.isPreferenciaParcial)
                    : resultados.herdeiros;
                    
                herdeirosParaPagar
                    .filter(h => h.valorLiquido > 0)
                    .forEach(herdeiro => {
                        const temCessoesHerdeiro = herdeiro.cessoesHerdeiro && herdeiro.cessoesHerdeiro.length > 0;
                        const valorDevido = temCessoesHerdeiro ? herdeiro.valorFinalAposCessoes : herdeiro.valorBruto;
                        const previdencia = temCessoesHerdeiro ? herdeiro.valorPrevidenciaFinal : herdeiro.valorPrevidencia;
                        const ir = temCessoesHerdeiro ? herdeiro.valorIRFinal : herdeiro.valorIR;
                        
                        pagamentos.push({
                            credor: `${herdeiro.nome} (Herdeiro)`,
                            valorDevido: valorDevido,
                            previdencia: previdencia,
                            ir: ir,
                            valorLiquido: herdeiro.valorLiquido
                        });
                        
                        // Cessionários dos herdeiros (só ordem)
                        if (!isPreferencia && herdeiro.cessoesHerdeiro && herdeiro.cessoesHerdeiro.length > 0) {
                            herdeiro.cessoesHerdeiro
                                .filter(cessao => cessao.valorLiquido && cessao.valorLiquido > 0)
                                .forEach(cessao => {
                                    pagamentos.push({
                                        credor: `${cessao.cessionario} (Cessionário de ${herdeiro.nome})`,
                                        valorDevido: cessao.valorBruto,
                                        previdencia: cessao.previdenciaCessao,
                                        ir: cessao.irCessao,
                                        valorLiquido: cessao.valorLiquido
                                    });
                                });
                        }
                        
                        // Advogados e cessionários
                        if (herdeiro.honorarios) {
                            herdeiro.honorarios.forEach(adv => {
                                let devePagar = isPreferencia ? (herdeiro.temPreferencia || herdeiro.isPreferenciaParcial) : true;
                                if (devePagar && adv.valorBrutoAdvogado > 0) {
                                    pagamentos.push({
                                        credor: `${adv.nome} (Advogado ${adv.tipo})`,
                                        valorDevido: adv.valorBrutoAdvogado,
                                        previdencia: 0,
                                        ir: adv.irAdvogado || 0,
                                        valorLiquido: adv.valorLiquidoAdvogado
                                    });
                                    
                                    // Cessionários do advogado
                                    if (adv.cessionarios && adv.cessionarios.length > 0) {
                                        let cessionariosRecebem = isPreferencia ? (herdeiro.temPreferencia && !herdeiro.isPreferenciaParcial) : true;
                                        if (cessionariosRecebem) {
                                            adv.cessionarios.forEach(cessionario => {
                                                pagamentos.push({
                                                    credor: `${cessionario.nome} (Cessionário de ${adv.nome})`,
                                                    valorDevido: cessionario.valorBruto,
                                                    previdencia: 0,
                                                    ir: cessionario.ir || 0,
                                                    valorLiquido: cessionario.valorLiquido
                                                });
                                            });
                                        }
                                    }
                                }
                            });
                        }
                        
                        // Sindicatos e cessionários
                        if (herdeiro.sindicatos) {
                            herdeiro.sindicatos.forEach(sind => {
                                let devePagar = isPreferencia ? (herdeiro.temPreferencia) : true;
                                if (devePagar) {
                                    // Se sindicato tem cessionários
                                    const temCessionarios = sind.cessionarios && sind.cessionarios.length > 0;
                                    
                                    if (!temCessionarios && sind.valorBrutoSindicato > 0) {
                                        // Sindicato sem cessão 
                                        pagamentos.push({
                                            credor: `${sind.nome} (Sindicato)`,
                                            valorDevido: sind.valorBrutoSindicato,
                                            previdencia: 0,
                                            ir: sind.irSindicato || 0,
                                            valorLiquido: sind.valorLiquidoSindicato
                                        });
                                    } else if (temCessionarios) {
                                        // Sindicato com cessão
                                        if (sind.valorBrutoSindicato > 0) {
                                            pagamentos.push({
                                                credor: `${sind.nome} (Sindicato)`,
                                                valorDevido: sind.valorBrutoSindicato,
                                                previdencia: 0,
                                                ir: sind.irSindicato || 0,
                                                valorLiquido: sind.valorLiquidoSindicato
                                            });
                                        }
                                        
                                        sind.cessionarios.forEach(cessionario => {
                                            if (cessionario.valorBruto > 0) {
                                                pagamentos.push({
                                                    credor: `${cessionario.nome} (Cessionário de ${sind.nome})`,
                                                    valorDevido: cessionario.valorBruto,
                                                    previdencia: 0,
                                                    ir: cessionario.ir || 0,
                                                    valorLiquido: cessionario.valorLiquido
                                                });
                                            }
                                        });
                                    }
                                }
                            });
                        }
                    });
                    if (resultados.honorariosSucumbenciais?.temHonorariosSucumbenciais) {
                        resultados.honorariosSucumbenciais.honorarios.forEach(adv => {
                            if (adv.valorBrutoAdvogado > 0) {
                                pagamentos.push({
                                    credor: `${adv.nome} (Adv. Sucumbencial ${adv.tipo})`,
                                    valorDevido: adv.valorBrutoAdvogado,
                                    previdencia: 0,
                                    ir: adv.irAdvogado || 0,
                                    valorLiquido: adv.valorLiquidoAdvogado || 0
                                });
                            }
                        });
                    }
                }
            return pagamentos;
        }

        function gerarPagamentosSemHerdeiros(resultados, dados) {
            const todosPagamentos = coletarTodosPagamentosSemHerdeiros(resultados, dados);

            if (todosPagamentos.length === 0) return '';

            return `
                <div class="pagamentos-finais">
                    <div class="table-container">
                        <h3>💰 Resumo de Pagamentos</h3>
                        <table>
                            <thead>
                                <tr>
                                    <th>Credor</th>
                                    <th>Valor Devido</th>
                                    <th>Previdência</th>
                                    <th>Imposto de Renda</th>
                                    <th>Valor Líquido</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${todosPagamentos.map(pagamento => {
                                    const valorDevidoArredondado = arredondarParaDuasCasas(pagamento.valorDevido);
                                    const previdenciaArredondada = arredondarParaDuasCasas(pagamento.previdencia);
                                    const irArredondado = arredondarParaDuasCasas(pagamento.ir);
                                    const valorLiquidoCalculado = arredondarParaDuasCasas(valorDevidoArredondado - previdenciaArredondada - irArredondado);
                                    
                                    return `
                                        <tr>
                                            <td>${pagamento.credor}</td>
                                            <td>R$ ${formatarMoeda(valorDevidoArredondado)}</td>
                                            <td>R$ ${formatarMoeda(previdenciaArredondada)}</td>
                                            <td>R$ ${formatarMoeda(irArredondado)}</td>
                                            <td>R$ ${formatarMoeda(valorLiquidoCalculado)}</td>
                                        </tr>
                                    `;
                                }).join('')}
                            </tbody>
                            <tfoot>
                                <tr class="highlight">
                                    <td><strong>TOTAL</strong></td>
                                    <td><strong>R$ ${formatarMoeda(calcularTotalDevido(todosPagamentos))}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(calcularTotalPrevidencia(todosPagamentos))}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(calcularTotalIR(todosPagamentos))}</strong></td>
                                    <td><strong>R$ ${formatarMoeda(calcularTotalLiquido(todosPagamentos))}</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                        
                        <div style="margin-top: 15px; padding: 10px; background-color: #f9f9f9; border-radius: 5px;">
                            <h4>📋 Notas sobre Tributação do Imposto de Renda:</h4>
                            <p style="margin: 5px 0;"><strong>Advogados Pessoa Física (PF):</strong> 🏦 LEI Nº 15.191, DE 11 DE AGOSTO DE 2025</p>
                            <p style="margin: 5px 0;"><strong>Advogados Pessoa Jurídica (PJ):</strong> 🏦 DECRETO 9.580, art 714</p>
                            <p style="margin: 5px 0;"><strong>Sindicatos:</strong> Tributação conforme Art. 27, da Lei nº 10.833/03 ou alíquota fixa quando aplicável</p>
                        </div>
                    </div>
                </div>
            `;
        }

        function calcularTotalCessionariosBeneficiario(cessionarios) {
            return {
                totalDevido: cessionarios.reduce((total, c) => total + arredondarParaDuasCasas(c.valorBruto), 0),
                totalPrevidencia: cessionarios.reduce((total, c) => total + arredondarParaDuasCasas(c.previdenciaCessao), 0),
                totalIR: cessionarios.reduce((total, c) => total + arredondarParaDuasCasas(c.irCessao), 0),
                totalLiquido: cessionarios.reduce((total, c) => {
                    const valorDevidoArr = arredondarParaDuasCasas(c.valorBruto);
                    const previdenciaArr = arredondarParaDuasCasas(c.previdenciaCessao);
                    const irArr = arredondarParaDuasCasas(c.irCessao);
                    return total + arredondarParaDuasCasas(valorDevidoArr - previdenciaArr - irArr);
                }, 0)
            };
        }

        function coletarTodosPagamentosSemHerdeiros(resultados, dados) {
            const pagamentos = [];
            
            // Beneficiário
            if (resultados.valorBeneficiarioFinal > 0) {
                pagamentos.push({
                    credor: `${dados.beneficiario} (Beneficiário)`,
                    valorDevido: resultados.valorBeneficiarioAposCessoes,
                    previdencia: resultados.valorPrevidenciaBeneficiario,
                    ir: resultados.valorIRBeneficiario,
                    valorLiquido: resultados.valorBeneficiarioFinal
                });
            }
            
            // Cessionários do Beneficiário
            if (resultados.cessoesBeneficiarioFinais) {
                resultados.cessoesBeneficiarioFinais
                    .filter(cessao => cessao.valorLiquido && cessao.valorLiquido > 0)
                    .forEach(cessao => {
                        pagamentos.push({
                            credor: `${cessao.cessionario} (Cessionário de ${dados.beneficiario})`,
                            valorDevido: cessao.valorBruto,
                            previdencia: cessao.previdenciaCessao,
                            ir: cessao.irCessao,
                            valorLiquido: cessao.valorLiquido
                        });
                    });
            }
            
            // Sindicatos
            if (resultados.sindicatos) {
                resultados.sindicatos
                .filter(sind => {
                        const valorDevido = (sind.cessoesSind && sind.cessoesSind.length > 0) 
                            ? sind.valorBrutoSindicato 
                            : sind.valorBruto;
                        
                        return sind.podeReceber && valorDevido > 0;
                    })
                    .forEach(sind => {
                        // Se tem cessão, usa valorBrutoSindicato (o que fica com ele)
                        // Se não tem cessão, usa valorBruto (o total)
                        const valorDevido = (sind.cessoesSind && sind.cessoesSind.length > 0) 
                            ? sind.valorBrutoSindicato 
                            : sind.valorBruto;
                        
                        const ir = (sind.cessoesSind && sind.cessoesSind.length > 0)
                            ? sind.irSindicato
                            : sind.irSindicato || 0;
                        
                        const valorLiquido = (sind.cessoesSind && sind.cessoesSind.length > 0)
                            ? sind.valorLiquidoSindicato
                            : sind.valorLiquido;
                        
                        pagamentos.push({
                            credor: `${sind.nome} (Sindicato)`,
                            valorDevido: valorDevido,  // ✅ CORRETO
                            previdencia: 0,
                            ir: ir,
                            valorLiquido: valorLiquido
                        });
                    });
            }
            
            // Cessionários de Sindicatos
            if (resultados.sindicatos) {
                resultados.sindicatos.forEach(sind => {
                    if (sind.cessionarios && sind.cessionarios.length > 0 && sind.podeReceber) {
                        sind.cessionarios.forEach(cessionario => {
                            pagamentos.push({
                                credor: `${cessionario.nome} (Cessionário de ${sind.nome})`,
                                valorDevido: cessionario.valorBruto,
                                previdencia: 0,
                                ir: cessionario.ir,
                                valorLiquido: cessionario.valorLiquido
                            });
                        });
                    }
                });
            }
            
            // Advogados
            const advogadosParaPagar = resultados.honorarios.filter(adv => 
                adv.percentualAdvogado > 0 && adv.valorBrutoAdvogado > 0
            );
            
            advogadosParaPagar.forEach(adv => {
                pagamentos.push({
                    credor: `${adv.nome} (Advogado ${adv.tipo})`,
                    valorDevido: adv.valorBrutoAdvogado,
                    previdencia: 0,
                    ir: adv.irAdvogado,
                    valorLiquido: adv.valorLiquidoAdvogado
                });
            });
            
            // Cessionários de Advogados
            const isPreferenciaParcial = dados.tipoCalculo === 'preferencia' && resultados.valorBase < resultados.valortotatt;
            const isParcial = dados.tipoCalculo === 'parcial';

            if (isParcial) {
                resultados.honorarios.forEach(adv => {
                    if (adv.cessionarios && adv.cessionarios.length > 0) {
                        adv.cessionarios.forEach(cessionario => {
                            // Valor do honorário parcial do advogado
                            const honorarioParcial = resultados.valorBase * adv.percentual;
                            const valorDevido = honorarioParcial * cessionario.percentual;
                            
                            let irCorreto = 0;
                            if (adv.tipo === 'PF') {
                                irCorreto = calcularIR(valorDevido); 
                            } else {
                                irCorreto = valorDevido * 0.015; // PJ: 1,5%
                            }
                            
                            const valorLiquido = valorDevido - irCorreto;
                            
                            pagamentos.push({
                                credor: `${cessionario.nome} (Cessionário de ${adv.nome})`,
                                valorDevido: valorDevido,
                                previdencia: 0,
                                ir: irCorreto,
                                valorLiquido: valorLiquido
                            });
                        });
                    }
                });
            } else if (!isPreferenciaParcial) {
                resultados.honorarios.forEach(adv => {
                    if (adv.cessionarios && adv.cessionarios.length > 0) {
                        adv.cessionarios.forEach(cessionario => {
                            pagamentos.push({
                                credor: `${cessionario.nome} (Cessionário de ${adv.nome})`,
                                valorDevido: cessionario.valorBruto,
                                previdencia: 0,
                                ir: cessionario.ir,
                                valorLiquido: cessionario.valorLiquido
                            });
                        });
                    }
                });
            }

            if (resultados.honorariosSucumbenciais?.temHonorariosSucumbenciais && 
                resultados.honorariosSucumbenciais?.honorarios?.length > 0) {
                
                const isPreferencia = dados.tipoCalculo === 'preferencia';
                const isParcial = dados.tipoCalculo === 'parcial';
                
                resultados.honorariosSucumbenciais.honorarios.forEach(adv => {
                    // ADVOGADO SUCUMBENCIAL
                    let deveReceberAdvogado = true;
                    let valorAdvogadoPagamento = adv.valorBrutoAdvogado;
                    
                    if (isPreferencia && !adv.temPreferencia) {
                        deveReceberAdvogado = false;
                    }
                    
                    if (deveReceberAdvogado && valorAdvogadoPagamento > 0) {
                        pagamentos.push({
                            credor: `${adv.nome} (Adv. Sucumbencial ${adv.tipo})`,
                            valorDevido: valorAdvogadoPagamento,
                            previdencia: 0,
                            ir: adv.irAdvogado || 0,
                            valorLiquido: adv.valorLiquidoAdvogado || 0
                        });
                    }
                    
                    let deveReceberCessionarios = true;
                    
                    if (isPreferencia) {
                        if (!adv.temPreferencia) {
                            deveReceberCessionarios = false;
                        } else if (adv.foiLimitadoPorPreferencia) {
                            deveReceberCessionarios = false;
                        }
                    }
                    
                    if (deveReceberCessionarios && adv.cessionarios && adv.cessionarios.length > 0) {
                        adv.cessionarios.forEach(cessionario => {
                            if (cessionario.valorLiquido > 0) {
                                pagamentos.push({
                                    credor: `${cessionario.nome} (Cessionário de ${adv.nome})`,
                                    valorDevido: cessionario.valorBruto,
                                    previdencia: 0,
                                    ir: cessionario.ir || 0,
                                    valorLiquido: cessionario.valorLiquido
                                });
                            }
                        });
                    }
                });
            }

            return pagamentos;
        }

        function calcularTotalDevido(pagamentos) {
            return pagamentos.reduce((total, p) => total + arredondarParaDuasCasas(p.valorDevido), 0);
        }

        function calcularTotalPrevidencia(pagamentos) {
            return pagamentos.reduce((total, p) => total + arredondarParaDuasCasas(p.previdencia), 0);
        }

        function calcularTotalIR(pagamentos) {
            return pagamentos.reduce((total, p) => total + arredondarParaDuasCasas(p.ir), 0);
        }

        function calcularTotalLiquido(pagamentos) {
            return pagamentos.reduce((total, p) => {
                const valorDevidoArredondado = arredondarParaDuasCasas(p.valorDevido);
                const previdenciaArredondada = arredondarParaDuasCasas(p.previdencia);
                const irArredondado = arredondarParaDuasCasas(p.ir);
                const valorLiquidoCalculado = arredondarParaDuasCasas(valorDevidoArredondado - previdenciaArredondada - irArredondado);
                return total + valorLiquidoCalculado;
            }, 0);
        }
